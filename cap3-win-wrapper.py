import argparse as ap

# Private modules
import _cap3winwrapper as cw

# Parse command-line arguments
paMain=ap.ArgumentParser(description=
        "Wrapper for the CAP3 program on Windows. Converts Applied Biosystems \
        .ab1 files to .fa and .qual files and generates a CAP3 executable \
        that can be run using Cygwin 32-bit for Windows.")
paMain.add_argument("designfile",help="Tab-separated file containing the \
        template names and sequencing reads in the format RUNNAME_SAMPLENAME. \
        SAMPLENAME but not RUNNAME can contain the underscore character. \
        Lines beginning with # are ignored. Optionally, a subset of the read \
        can be selected using the format RUNNAME_SAMPLENAME:FIRST-LAST, using \
        a 1-indexed range FIRST-LAST.",metavar="FILE.tsv",type=str)
paMain.add_argument("readpath",help="Parent path of the run directories \
        containing .ab1 reads. Sequencing reads must be named \
        *RUNNAME*/*SAMPLENAME*.ab1, so no other folders or files in readpath \
        may contain RUNNAME and SAMPLENAME, respectively.",
        metavar="PATH/TO/READS",type=str)
paMain.add_argument("-c","--cap3run",help="Name of the CAP3 .sh \
        executable to be generated by this program, followed by a space \
        and the location of the CAP3 executable in Cygwin format without any \
        executable extensions, example: MYCAP.sh /cygdrive/c/CAP3/cap3",
        metavar="PATH",default=None,type=str,nargs=2)
paMain.add_argument("-t","--templates",help="List of templates to assemble. \
        Omit to assemble all templates.",metavar="TEMPLATE",type=str,nargs="*",
        default=None)
paNames=paMain.parse_args()

# Read in the design file
dictDes=cw._io._read_design(paNames.designfile,paNames.templates)

# Identify the sequencing reads
dictPaths,dictRanges=cw._conversion._design2paths(dictDes,paNames.readpath)

# Convert .ab1 to .fa and .qual files
cw._conversion._ab2faqual(dictDes,dictPaths,dictRanges)

# Write the batch file if requested
if paNames.cap3run is not None:
    cw._io._write_cap_sh(paNames.cap3run[0],paNames.cap3run[1],dictDes)

print("".join(["Processed ",str(len(dictDes))," templates."]))
